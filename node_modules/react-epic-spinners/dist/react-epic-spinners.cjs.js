'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = _interopDefault(require('react'));
var PropTypes = _interopDefault(require('prop-types'));
var styled = _interopDefault(require('styled-components'));

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _taggedTemplateLiteralLoose(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }

  strings.raw = raw;
  return strings;
}

function _templateObject() {
  var data = _taggedTemplateLiteralLoose(["\n  height: ", "px;\n  width: ", "px;\n  overflow: hidden;\n\n  * {\n    box-sizing: border-box;\n  }\n\n  .spinner-inner {\n    position: relative;\n    display: block;\n    height: 100%;\n    width: 100%;\n  }\n\n  .spinner-circle {\n    display: block;\n    position: absolute;\n    color: ", ";\n    font-size: calc(", "px * 0.24);\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n  }\n\n  .spinner-line {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    border-radius: 50%;\n    animation-duration: ", "ms;\n    border-left-width: calc(", "px / 25);\n    border-top-width: calc(", "px / 25);\n    border-left-color: ", ";\n    border-left-style: solid;\n    border-top-style: solid;\n    border-top-color: transparent;\n  }\n\n  .spinner-line:nth-child(1) {\n    animation: atom-spinner-animation-1 ", "ms\n      linear infinite;\n    transform: rotateZ(120deg) rotateX(66deg) rotateZ(0deg);\n  }\n\n  .spinner-line:nth-child(2) {\n    animation: atom-spinner-animation-2 ", "ms\n      linear infinite;\n    transform: rotateZ(240deg) rotateX(66deg) rotateZ(0deg);\n  }\n\n  .spinner-line:nth-child(3) {\n    animation: atom-spinner-animation-3 ", "ms\n      linear infinite;\n    transform: rotateZ(360deg) rotateX(66deg) rotateZ(0deg);\n  }\n\n  @keyframes atom-spinner-animation-1 {\n    100% {\n      transform: rotateZ(120deg) rotateX(66deg) rotateZ(360deg);\n    }\n  }\n  @keyframes atom-spinner-animation-2 {\n    100% {\n      transform: rotateZ(240deg) rotateX(66deg) rotateZ(360deg);\n    }\n  }\n  @keyframes atom-spinner-animation-3 {\n    100% {\n      transform: rotateZ(360deg) rotateX(66deg) rotateZ(360deg);\n    }\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}
var Atom = styled.div(_templateObject(), function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.color;
}, function (props) {
  return props.size;
}, function (props) {
  return props.animationDuration;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.color;
}, function (props) {
  return props.animationDuration;
}, function (props) {
  return props.animationDuration;
}, function (props) {
  return props.animationDuration;
});
var propTypes = {
  size: PropTypes.number,
  animationDuration: PropTypes.number,
  color: PropTypes.string,
  className: PropTypes.string,
  style: PropTypes.object
};
var AtomSpinner = function AtomSpinner(_ref) {
  var _ref$size = _ref.size,
      size = _ref$size === void 0 ? 60 : _ref$size,
      _ref$animationDuratio = _ref.animationDuration,
      animationDuration = _ref$animationDuratio === void 0 ? 1000 : _ref$animationDuratio,
      _ref$color = _ref.color,
      color = _ref$color === void 0 ? '#fff' : _ref$color,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      style = _ref.style,
      props = _objectWithoutPropertiesLoose(_ref, ["size", "animationDuration", "color", "className", "style"]);

  return React.createElement(Atom, _extends({
    size: size,
    color: color,
    animationDuration: animationDuration,
    className: "atom-spinner" + (className ? ' ' + className : ''),
    style: style
  }, props), React.createElement("div", {
    className: "spinner-inner"
  }, React.createElement("div", {
    className: "spinner-line"
  }), React.createElement("div", {
    className: "spinner-line"
  }), React.createElement("div", {
    className: "spinner-line"
  }), React.createElement("div", {
    className: "spinner-circle"
  }, "\u25CF")));
};
AtomSpinner.propTypes = propTypes;

function _templateObject$1() {
  var data = _taggedTemplateLiteralLoose(["\n  height: ", "px;\n  width: ", "px;\n  position: relative;\n  transform: rotate(45deg);\n\n  * {\n    box-sizing: border-box;\n  }\n\n  .rhombus {\n    height: calc(", "px / 7.5);\n    width: calc(", "px / 7.5);\n    animation-duration: ", "ms;\n    top: calc(", "px / 2.3077);\n    left: calc(", "px / 2.3077);\n    background-color: ", ";\n    position: absolute;\n    animation-iteration-count: infinite;\n  }\n\n  .rhombus:nth-child(2n + 0) {\n    margin-right: 0;\n  }\n\n  .rhombus.child-1 {\n    animation-name: breeding-rhombus-spinner-animation-child-1;\n    animation-delay: calc(", "ms * 1);\n  }\n\n  .rhombus.child-2 {\n    animation-name: breeding-rhombus-spinner-animation-child-2;\n    animation-delay: calc(", "ms * 2);\n  }\n\n  .rhombus.child-3 {\n    animation-name: breeding-rhombus-spinner-animation-child-3;\n    animation-delay: calc(", "ms * 3);\n  }\n\n  .rhombus.child-4 {\n    animation-name: breeding-rhombus-spinner-animation-child-4;\n    animation-delay: calc(", "ms * 4);\n  }\n\n  .rhombus.child-5 {\n    animation-name: breeding-rhombus-spinner-animation-child-5;\n    animation-delay: calc(", "ms * 5);\n  }\n\n  .rhombus.child-6 {\n    animation-name: breeding-rhombus-spinner-animation-child-6;\n    animation-delay: calc(", "ms * 6);\n  }\n\n  .rhombus.child-7 {\n    animation-name: breeding-rhombus-spinner-animation-child-7;\n    animation-delay: calc(", "ms * 7);\n  }\n\n  .rhombus.child-8 {\n    animation-name: breeding-rhombus-spinner-animation-child-8;\n    animation-delay: calc(", "ms * 8);\n  }\n\n  .rhombus.big {\n    height: calc(", "px / 3);\n    width: calc(", "px / 3);\n    animation-duration: ", "ms;\n    top: calc(", "px / 3);\n    left: calc(", "px / 3);\n    background-color: ", ";\n    animation: breeding-rhombus-spinner-animation-child-big\n      ", " infinite;\n    animation-delay: 0.5s;\n  }\n\n  @keyframes breeding-rhombus-spinner-animation-child-1 {\n    50% {\n      transform: translate(-325%, -325%);\n    }\n  }\n  @keyframes breeding-rhombus-spinner-animation-child-2 {\n    50% {\n      transform: translate(0, -325%);\n    }\n  }\n  @keyframes breeding-rhombus-spinner-animation-child-3 {\n    50% {\n      transform: translate(325%, -325%);\n    }\n  }\n  @keyframes breeding-rhombus-spinner-animation-child-4 {\n    50% {\n      transform: translate(325%, 0);\n    }\n  }\n  @keyframes breeding-rhombus-spinner-animation-child-5 {\n    50% {\n      transform: translate(325%, 325%);\n    }\n  }\n  @keyframes breeding-rhombus-spinner-animation-child-6 {\n    50% {\n      transform: translate(0, 325%);\n    }\n  }\n  @keyframes breeding-rhombus-spinner-animation-child-7 {\n    50% {\n      transform: translate(-325%, 325%);\n    }\n  }\n  @keyframes breeding-rhombus-spinner-animation-child-8 {\n    50% {\n      transform: translate(-325%, 0);\n    }\n  }\n  @keyframes breeding-rhombus-spinner-animation-child-big {\n    50% {\n      transform: scale(0.5);\n    }\n  }\n"]);

  _templateObject$1 = function _templateObject() {
    return data;
  };

  return data;
}
var BreedingSpinner = styled.div(_templateObject$1(), function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.animationDuration;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.color;
}, function (props) {
  return props.delayModifier;
}, function (props) {
  return props.delayModifier;
}, function (props) {
  return props.delayModifier;
}, function (props) {
  return props.delayModifier;
}, function (props) {
  return props.delayModifier;
}, function (props) {
  return props.delayModifier;
}, function (props) {
  return props.delayModifier;
}, function (props) {
  return props.delayModifier;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.animationDuration;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.color;
}, function (props) {
  return props.animationDuration;
});
var propTypes$1 = {
  size: PropTypes.number,
  animationDuration: PropTypes.number,
  color: PropTypes.string,
  className: PropTypes.string,
  style: PropTypes.object
};

function generateRhombusChildren(num) {
  return Array.from({
    length: num
  }).map(function (val, index) {
    return React.createElement("div", {
      key: index,
      className: "rhombus child-" + (index + 1)
    });
  });
}

var BreedingRhombusSpinner = function BreedingRhombusSpinner(_ref) {
  var _ref$size = _ref.size,
      size = _ref$size === void 0 ? 150 : _ref$size,
      _ref$color = _ref.color,
      color = _ref$color === void 0 ? '#fff' : _ref$color,
      _ref$animationDuratio = _ref.animationDuration,
      animationDuration = _ref$animationDuratio === void 0 ? 2000 : _ref$animationDuratio,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      style = _ref.style,
      props = _objectWithoutPropertiesLoose(_ref, ["size", "color", "animationDuration", "className", "style"]);

  return React.createElement(BreedingSpinner, _extends({
    size: size,
    color: color,
    animationDuration: animationDuration,
    className: "breeding-rhombus-spinner" + (className ? ' ' + className : ''),
    style: style,
    delayModifier: animationDuration * 0.05
  }, props), generateRhombusChildren(8), React.createElement("div", {
    className: "rhombus big"
  }));
};

BreedingRhombusSpinner.propTypes = propTypes$1;

function _templateObject$2() {
  var data = _taggedTemplateLiteralLoose(["\n  height: ", "px;\n  width: ", "px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  * {\n    box-sizing: border-box;\n  }\n\n  .circle {\n    height: ", "px;\n    width: ", "px;\n    margin-left: ", "px;\n    transform: rotate(45deg);\n    border-radius: 10%;\n    border: 3px solid ", ";\n    overflow: hidden;\n    background: transparent;\n    animation: circles-to-rhombuses-animation\n      ", "ms linear infinite;\n  }\n  .circle:nth-child(1) {\n    animation-delay: calc(", "ms * 1);\n    margin-left: 0;\n  }\n  .circle:nth-child(2) {\n    animation-delay: calc(", "ms * 2);\n  }\n  .circle:nth-child(3) {\n    animation-delay: calc(", "ms * 3);\n  }\n  @keyframes circles-to-rhombuses-animation {\n    0% {\n      border-radius: 10%;\n    }\n    17.5% {\n      border-radius: 10%;\n    }\n    50% {\n      border-radius: 100%;\n    }\n    93.5% {\n      border-radius: 10%;\n    }\n    100% {\n      border-radius: 10%;\n    }\n  }\n"]);

  _templateObject$2 = function _templateObject() {
    return data;
  };

  return data;
}
var CircleRhombus = styled.div(_templateObject$2(), function (props) {
  return props.size;
}, function (props) {
  return (props.size + props.circleMarginLeft) * props.circleNum;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.circleMarginLeft;
}, function (props) {
  return props.color;
}, function (props) {
  return props.animationDuration;
}, function (props) {
  return props.delay;
}, function (props) {
  return props.delay;
}, function (props) {
  return props.delay;
});
var propTypes$2 = {
  size: PropTypes.number,
  animationDuration: PropTypes.number,
  color: PropTypes.string,
  className: PropTypes.string,
  style: PropTypes.object
};

function generateRhombusChildren$1(num) {
  return Array.from({
    length: num
  }).map(function (val, index) {
    return React.createElement("div", {
      key: index,
      className: "circle"
    });
  });
}

var CirclesToRhombusesSpinner = function CirclesToRhombusesSpinner(_ref) {
  var _ref$size = _ref.size,
      size = _ref$size === void 0 ? 15 : _ref$size,
      _ref$color = _ref.color,
      color = _ref$color === void 0 ? '#fff' : _ref$color,
      _ref$animationDuratio = _ref.animationDuration,
      animationDuration = _ref$animationDuratio === void 0 ? 1200 : _ref$animationDuratio,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      style = _ref.style,
      props = _objectWithoutPropertiesLoose(_ref, ["size", "color", "animationDuration", "className", "style"]);

  var circleMarginLeft = size * 1.125;
  var circleNum = 3;
  var delay = 150;
  return React.createElement(CircleRhombus, _extends({
    size: size,
    color: color,
    animationDuration: animationDuration,
    className: "circles-to-rhombuses-spinner" + (className ? ' ' + className : ''),
    style: style,
    circleMarginLeft: circleMarginLeft,
    delay: delay,
    circleNum: circleNum
  }, props), generateRhombusChildren$1(circleNum));
};

CirclesToRhombusesSpinner.propTypes = propTypes$2;

function _templateObject$3() {
  var data = _taggedTemplateLiteralLoose(["\n  height: ", "px;\n  width: ", "px;\n  padding: ", "px;\n  overflow: hidden;\n  position: relative;\n\n  * {\n    box-sizing: border-box;\n  }\n\n  .spinner-ring {\n    position: absolute;\n    border-radius: 50%;\n    border: 2px solid transparent;\n    border-top-color: ", ";\n    animation: fingerprint-spinner-animation\n      ", "ms\n      cubic-bezier(0.68, -0.75, 0.265, 1.75) infinite forwards;\n    margin: auto;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    top: 0;\n  }\n  .spinner-ring:nth-child(1) {\n    height: ", "px;\n    width: ", "px;\n    animation-delay: calc(50ms * 1);\n  }\n  .spinner-ring:nth-child(2) {\n    height: ", "px;\n    width: ", "px;\n    animation-delay: calc(50ms * 2);\n  }\n  .spinner-ring:nth-child(3) {\n    height: ", "px;\n    width: ", "px;\n    animation-delay: calc(50ms * 3);\n  }\n  .spinner-ring:nth-child(4) {\n    height: ", "px;\n    width: ", "px;\n    animation-delay: calc(50ms * 4);\n  }\n  .spinner-ring:nth-child(5) {\n    height: ", "px;\n    width: ", "px;\n    animation-delay: calc(50ms * 5);\n  }\n  .spinner-ring:nth-child(6) {\n    height: ", "px;\n    width: ", "px;\n    animation-delay: calc(50ms * 6);\n  }\n  .spinner-ring:nth-child(7) {\n    height: ", "px;\n    width: ", "px;\n    animation-delay: calc(50ms * 7);\n  }\n  .spinner-ring:nth-child(8) {\n    height: ", "px;\n    width: ", "px;\n    animation-delay: calc(50ms * 8);\n  }\n  .spinner-ring:nth-child(9) {\n    height: ", "px;\n    width: ", "px;\n    animation-delay: calc(50ms * 9);\n  }\n\n  @keyframes fingerprint-spinner-animation {\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n"]);

  _templateObject$3 = function _templateObject() {
    return data;
  };

  return data;
}
var RingSpinner = styled.div(_templateObject$3(), function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.containerPadding;
}, function (props) {
  return props.color;
}, function (props) {
  return props.animationDuration;
}, function (props) {
  return props.ringBase + 0 * props.ringBase;
}, function (props) {
  return props.ringBase + 0 * props.ringBase;
}, function (props) {
  return props.ringBase + 1 * props.ringBase;
}, function (props) {
  return props.ringBase + 1 * props.ringBase;
}, function (props) {
  return props.ringBase + 2 * props.ringBase;
}, function (props) {
  return props.ringBase + 2 * props.ringBase;
}, function (props) {
  return props.ringBase + 3 * props.ringBase;
}, function (props) {
  return props.ringBase + 3 * props.ringBase;
}, function (props) {
  return props.ringBase + 4 * props.ringBase;
}, function (props) {
  return props.ringBase + 4 * props.ringBase;
}, function (props) {
  return props.ringBase + 5 * props.ringBase;
}, function (props) {
  return props.ringBase + 5 * props.ringBase;
}, function (props) {
  return props.ringBase + 6 * props.ringBase;
}, function (props) {
  return props.ringBase + 6 * props.ringBase;
}, function (props) {
  return props.ringBase + 7 * props.ringBase;
}, function (props) {
  return props.ringBase + 7 * props.ringBase;
}, function (props) {
  return props.ringBase + 8 * props.ringBase;
}, function (props) {
  return props.ringBase + 8 * props.ringBase;
});
var propTypes$3 = {
  size: PropTypes.number,
  animationDuration: PropTypes.number,
  color: PropTypes.string,
  className: PropTypes.string,
  style: PropTypes.object
};

function generateRings(num) {
  return Array.from({
    length: num
  }).map(function (val, index) {
    return React.createElement("div", {
      key: index,
      className: "spinner-ring"
    });
  });
}

var FingerprintSpinner = function FingerprintSpinner(_ref) {
  var _ref$size = _ref.size,
      size = _ref$size === void 0 ? 60 : _ref$size,
      _ref$color = _ref.color,
      color = _ref$color === void 0 ? "#fff" : _ref$color,
      _ref$animationDuratio = _ref.animationDuration,
      animationDuration = _ref$animationDuratio === void 0 ? 1500 : _ref$animationDuratio,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? "" : _ref$className,
      style = _ref.style,
      props = _objectWithoutPropertiesLoose(_ref, ["size", "color", "animationDuration", "className", "style"]);

  var ringsNum = 9;
  var containerPadding = 2;
  var outerRingSize = size - containerPadding * 2;
  var ringBase = outerRingSize / ringsNum;
  return React.createElement(RingSpinner, _extends({
    size: size,
    color: color,
    animationDuration: animationDuration,
    className: "fingerprint-spinner" + (className ? " " + className : ""),
    style: style,
    ringBase: ringBase,
    containerPadding: containerPadding
  }, props), generateRings(ringsNum));
};

FingerprintSpinner.propTypes = propTypes$3;

function _templateObject$4() {
  var data = _taggedTemplateLiteralLoose(["\n  height: ", "px;\n  width: ", "px;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n\n  * {\n    box-sizing: border-box;\n  }\n\n  .dots-container {\n    height: ", "px;\n    width: ", "px;\n  }\n  .smaller-dot {\n    background: ", ";\n    height: 100%;\n    width: 100%;\n    border-radius: 50%;\n    animation: flower-spinner-smaller-dot-animation\n      ", "ms 0s infinite both;\n  }\n  .bigger-dot {\n    background: ", ";\n    height: 100%;\n    width: 100%;\n    padding: 10%;\n    border-radius: 50%;\n    animation: flower-spinner-bigger-dot-animation\n      ", "ms 0s infinite both;\n  }\n  @keyframes flower-spinner-bigger-dot-animation {\n    0%,\n    100% {\n      box-shadow: 0px 0px 0px ", ",\n        0px 0px 0px ", ",\n        0px 0px 0px ", ",\n        0px 0px 0px ", ",\n        0px 0px 0px ", ",\n        0px 0px 0px ", ",\n        0px 0px 0px ", ",\n        0px 0px 0px ", ";\n    }\n    50% {\n      transform: rotate(180deg);\n    }\n    25%,\n    75% {\n      box-shadow: ", "px 0 0\n          ", ",\n        -", "px 0 0 ", ",\n        0 ", "px 0 ", ",\n        0 -", "px 0 ", ",\n        ", "px -", "px\n          0 ", ",\n        ", "px ", "px\n          0 ", ",\n        -", "px -", "px\n          0 ", ",\n        -", "px ", "px\n          0 ", ";\n    }\n    100% {\n      transform: rotate(360deg);\n      box-shadow: 0px 0px 0px ", ",\n        0px 0px 0px ", ",\n        0px 0px 0px ", ",\n        0px 0px 0px ", ",\n        0px 0px 0px ", ",\n        0px 0px 0px ", ",\n        0px 0px 0px ", ",\n        0px 0px 0px ", ";\n    }\n  }\n  @keyframes flower-spinner-smaller-dot-animation {\n    0%,\n    100% {\n      box-shadow: 0px 0px 0px ", ",\n        0px 0px 0px ", ",\n        0px 0px 0px ", ",\n        0px 0px 0px ", ",\n        0px 0px 0px ", ",\n        0px 0px 0px ", ",\n        0px 0px 0px ", ",\n        0px 0px 0px ", ";\n    }\n    25%,\n    75% {\n      box-shadow: ", "px 0 0\n          ", ",\n        -", "px 0 0 ", ",\n        0 ", "px 0 ", ",\n        0 -", "px 0 ", ",\n        ", "px -", "px 0 ", ",\n        ", "px ", "px 0\n          ", ",\n        -", "px -", "px 0\n          ", ",\n        -", "px ", "px 0 ", ";\n    }\n    100% {\n      box-shadow: 0px 0px 0px ", ",\n        0px 0px 0px ", ",\n        0px 0px 0px ", ",\n        0px 0px 0px ", ",\n        0px 0px 0px ", ",\n        0px 0px 0px ", ",\n        0px 0px 0px ", ",\n        0px 0px 0px ", ";\n    }\n  }\n"]);

  _templateObject$4 = function _templateObject() {
    return data;
  };

  return data;
}
var Flower = styled.div(_templateObject$4(), function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.dotSize;
}, function (props) {
  return props.dotSize;
}, function (props) {
  return props.color;
}, function (props) {
  return props.animationDuration;
}, function (props) {
  return props.color;
}, function (props) {
  return props.animationDuration;
}, function (props) {
  return props.color;
}, function (props) {
  return props.color;
}, function (props) {
  return props.color;
}, function (props) {
  return props.color;
}, function (props) {
  return props.color;
}, function (props) {
  return props.color;
}, function (props) {
  return props.color;
}, function (props) {
  return props.color;
}, function (props) {
  return props.dotSize * 2.6;
}, function (props) {
  return props.color;
}, function (props) {
  return props.dotSize * 2.6;
}, function (props) {
  return props.color;
}, function (props) {
  return props.dotSize * 2.6;
}, function (props) {
  return props.color;
}, function (props) {
  return props.dotSize * 2.6;
}, function (props) {
  return props.color;
}, function (props) {
  return props.dotSize * 1.9;
}, function (props) {
  return props.dotSize * 1.9;
}, function (props) {
  return props.color;
}, function (props) {
  return props.dotSize * 1.9;
}, function (props) {
  return props.dotSize * 1.9;
}, function (props) {
  return props.color;
}, function (props) {
  return props.dotSize * 1.9;
}, function (props) {
  return props.dotSize * 1.9;
}, function (props) {
  return props.color;
}, function (props) {
  return props.dotSize * 1.9;
}, function (props) {
  return props.dotSize * 1.9;
}, function (props) {
  return props.color;
}, function (props) {
  return props.color;
}, function (props) {
  return props.color;
}, function (props) {
  return props.color;
}, function (props) {
  return props.color;
}, function (props) {
  return props.color;
}, function (props) {
  return props.color;
}, function (props) {
  return props.color;
}, function (props) {
  return props.color;
}, function (props) {
  return props.color;
}, function (props) {
  return props.color;
}, function (props) {
  return props.color;
}, function (props) {
  return props.color;
}, function (props) {
  return props.color;
}, function (props) {
  return props.color;
}, function (props) {
  return props.color;
}, function (props) {
  return props.color;
}, function (props) {
  return props.dotSize * 1.4;
}, function (props) {
  return props.color;
}, function (props) {
  return props.dotSize * 1.4;
}, function (props) {
  return props.color;
}, function (props) {
  return props.dotSize * 1.4;
}, function (props) {
  return props.color;
}, function (props) {
  return props.dotSize * 1.4;
}, function (props) {
  return props.color;
}, function (props) {
  return props.dotSize;
}, function (props) {
  return props.dotSize;
}, function (props) {
  return props.color;
}, function (props) {
  return props.dotSize;
}, function (props) {
  return props.dotSize;
}, function (props) {
  return props.color;
}, function (props) {
  return props.dotSize;
}, function (props) {
  return props.dotSize;
}, function (props) {
  return props.color;
}, function (props) {
  return props.dotSize;
}, function (props) {
  return props.dotSize;
}, function (props) {
  return props.color;
}, function (props) {
  return props.color;
}, function (props) {
  return props.color;
}, function (props) {
  return props.color;
}, function (props) {
  return props.color;
}, function (props) {
  return props.color;
}, function (props) {
  return props.color;
}, function (props) {
  return props.color;
}, function (props) {
  return props.color;
});
var propTypes$4 = {
  size: PropTypes.number,
  animationDuration: PropTypes.number,
  color: PropTypes.string,
  className: PropTypes.string,
  style: PropTypes.object
};

var FlowerSpinner = function FlowerSpinner(_ref) {
  var _ref$size = _ref.size,
      size = _ref$size === void 0 ? 70 : _ref$size,
      _ref$color = _ref.color,
      color = _ref$color === void 0 ? '#fff' : _ref$color,
      _ref$animationDuratio = _ref.animationDuration,
      animationDuration = _ref$animationDuratio === void 0 ? 2500 : _ref$animationDuratio,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      style = _ref.style,
      props = _objectWithoutPropertiesLoose(_ref, ["size", "color", "animationDuration", "className", "style"]);

  var dotSize = size / 7;
  return React.createElement(Flower, _extends({
    size: size,
    color: color,
    animationDuration: animationDuration,
    className: "flower-spinner" + (className ? ' ' + className : ''),
    style: style,
    dotSize: dotSize
  }, props), React.createElement("div", {
    className: "dots-container"
  }, React.createElement("div", {
    className: "bigger-dot"
  }, React.createElement("div", {
    className: "smaller-dot"
  }))));
};

FlowerSpinner.propTypes = propTypes$4;

function _templateObject$5() {
  var data = _taggedTemplateLiteralLoose(["\n  height: ", "px;\n  width: ", "px;\n  position: relative;\n  animation: fulfilling-bouncing-circle-spinner-animation infinite\n    ", "ms ease;\n\n  * {\n    box-sizing: border-box;\n  }\n\n  .orbit {\n    height: ", "px;\n    width: ", "px;\n    position: absolute;\n    top: 0;\n    left: 0;\n    border-radius: 50%;\n    border: calc(", "px * 0.03) solid\n      ", ";\n    animation: fulfilling-bouncing-circle-spinner-orbit-animation infinite\n      ", "ms ease;\n  }\n  .circle {\n    height: ", "px;\n    width: ", "px;\n    color: ", ";\n    display: block;\n    border-radius: 50%;\n    position: relative;\n    border: calc(", "px * 0.1) solid\n      ", ";\n    animation: fulfilling-bouncing-circle-spinner-circle-animation infinite\n      ", "ms ease;\n    transform: rotate(0deg) scale(1);\n  }\n  @keyframes fulfilling-bouncing-circle-spinner-animation {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n  @keyframes fulfilling-bouncing-circle-spinner-orbit-animation {\n    0% {\n      transform: scale(1);\n    }\n    50% {\n      transform: scale(1);\n    }\n    62.5% {\n      transform: scale(0.8);\n    }\n    75% {\n      transform: scale(1);\n    }\n    87.5% {\n      transform: scale(0.8);\n    }\n    100% {\n      transform: scale(1);\n    }\n  }\n  @keyframes fulfilling-bouncing-circle-spinner-circle-animation {\n    0% {\n      transform: scale(1);\n      border-color: transparent;\n      border-top-color: inherit;\n    }\n    16.7% {\n      border-color: transparent;\n      border-top-color: initial;\n      border-right-color: initial;\n    }\n    33.4% {\n      border-color: transparent;\n      border-top-color: inherit;\n      border-right-color: inherit;\n      border-bottom-color: inherit;\n    }\n    50% {\n      border-color: inherit;\n      transform: scale(1);\n    }\n    62.5% {\n      border-color: inherit;\n      transform: scale(1.4);\n    }\n    75% {\n      border-color: inherit;\n      transform: scale(1);\n      opacity: 1;\n    }\n    87.5% {\n      border-color: inherit;\n      transform: scale(1.4);\n    }\n    100% {\n      border-color: transparent;\n      border-top-color: inherit;\n      transform: scale(1);\n    }\n  }\n"]);

  _templateObject$5 = function _templateObject() {
    return data;
  };

  return data;
}
var BouncingCircle = styled.div(_templateObject$5(), function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.animationDuration;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.color;
}, function (props) {
  return props.animationDuration;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.color;
}, function (props) {
  return props.size;
}, function (props) {
  return props.color;
}, function (props) {
  return props.animationDuration;
});
var propTypes$5 = {
  size: PropTypes.number,
  animationDuration: PropTypes.number,
  color: PropTypes.string,
  className: PropTypes.string,
  style: PropTypes.object
};

var FulfillingBouncingCircleSpinner = function FulfillingBouncingCircleSpinner(_ref) {
  var _ref$size = _ref.size,
      size = _ref$size === void 0 ? 60 : _ref$size,
      _ref$color = _ref.color,
      color = _ref$color === void 0 ? '#fff' : _ref$color,
      _ref$animationDuratio = _ref.animationDuration,
      animationDuration = _ref$animationDuratio === void 0 ? 4000 : _ref$animationDuratio,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      style = _ref.style,
      props = _objectWithoutPropertiesLoose(_ref, ["size", "color", "animationDuration", "className", "style"]);

  return React.createElement(BouncingCircle, _extends({
    size: size,
    color: color,
    animationDuration: animationDuration,
    className: "fulfilling-bouncing-circle-spinner" + (className ? ' ' + className : ''),
    style: style
  }, props), React.createElement("div", {
    className: "circle"
  }), React.createElement("div", {
    className: "orbit"
  }));
};

FulfillingBouncingCircleSpinner.propTypes = propTypes$5;

function _templateObject$6() {
  var data = _taggedTemplateLiteralLoose(["\n  height: ", "px;\n  width: ", "px;\n  position: relative;\n  border: 4px solid ", ";\n  animation: fulfilling-square-spinner-animation\n    ", "ms infinite ease;\n\n  * {\n    box-sizing: border-box;\n  }\n\n  .spinner-inner {\n    vertical-align: top;\n    display: inline-block;\n    background-color: ", ";\n    width: 100%;\n    opacity: 1;\n    animation: fulfilling-square-spinner-inner-animation\n      ", "ms infinite ease-in;\n  }\n\n  @keyframes fulfilling-square-spinner-animation {\n    0% {\n      transform: rotate(0deg);\n    }\n    25% {\n      transform: rotate(180deg);\n    }\n    50% {\n      transform: rotate(180deg);\n    }\n    75% {\n      transform: rotate(360deg);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n\n  @keyframes fulfilling-square-spinner-inner-animation {\n    0% {\n      height: 0%;\n    }\n    25% {\n      height: 0%;\n    }\n    50% {\n      height: 100%;\n    }\n    75% {\n      height: 100%;\n    }\n    100% {\n      height: 0%;\n    }\n  }\n"]);

  _templateObject$6 = function _templateObject() {
    return data;
  };

  return data;
}
var SquareSpinner = styled.div(_templateObject$6(), function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.color;
}, function (props) {
  return props.animationDuration;
}, function (props) {
  return props.color;
}, function (props) {
  return props.animationDuration;
});
var propTypes$6 = {
  size: PropTypes.number,
  animationDuration: PropTypes.number,
  color: PropTypes.string,
  className: PropTypes.string,
  style: PropTypes.object
};

var FulfillingSquareSpinner = function FulfillingSquareSpinner(_ref) {
  var _ref$size = _ref.size,
      size = _ref$size === void 0 ? 50 : _ref$size,
      _ref$color = _ref.color,
      color = _ref$color === void 0 ? '#fff' : _ref$color,
      _ref$animationDuratio = _ref.animationDuration,
      animationDuration = _ref$animationDuratio === void 0 ? 4000 : _ref$animationDuratio,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      style = _ref.style,
      props = _objectWithoutPropertiesLoose(_ref, ["size", "color", "animationDuration", "className", "style"]);

  return React.createElement(SquareSpinner, _extends({
    size: size,
    color: color,
    animationDuration: animationDuration,
    className: "fulfilling-square-spinner" + (className ? ' ' + className : ''),
    style: style
  }, props), React.createElement("div", {
    className: "spinner-inner"
  }));
};

FulfillingSquareSpinner.propTypes = propTypes$6;

function _templateObject$7() {
  var data = _taggedTemplateLiteralLoose(["\n  width: ", "px;\n  height: ", "px;\n  border-radius: 100%;\n  position: relative;\n\n  * {\n    box-sizing: border-box;\n  }\n\n  .circle {\n    content: '';\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    border-radius: 100%;\n    border: calc(", "px / 10) solid transparent;\n  }\n  .circle.circle-1 {\n    border-top-color: ", ";\n    animation: half-circle-spinner-animation\n      ", "ms infinite;\n  }\n  .circle.circle-2 {\n    border-bottom-color: ", ";\n    animation: half-circle-spinner-animation\n      ", "ms infinite alternate;\n  }\n  @keyframes half-circle-spinner-animation {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n"]);

  _templateObject$7 = function _templateObject() {
    return data;
  };

  return data;
}
var HalfSpinner = styled.div(_templateObject$7(), function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.color;
}, function (props) {
  return props.animationDuration;
}, function (props) {
  return props.color;
}, function (props) {
  return props.animationDuration;
});
var propTypes$7 = {
  size: PropTypes.number,
  animationDuration: PropTypes.number,
  color: PropTypes.string,
  className: PropTypes.string,
  style: PropTypes.object
};

var HalfCircleSpinner = function HalfCircleSpinner(_ref) {
  var _ref$size = _ref.size,
      size = _ref$size === void 0 ? 60 : _ref$size,
      _ref$color = _ref.color,
      color = _ref$color === void 0 ? '#fff' : _ref$color,
      _ref$animationDuratio = _ref.animationDuration,
      animationDuration = _ref$animationDuratio === void 0 ? 1000 : _ref$animationDuratio,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      style = _ref.style,
      props = _objectWithoutPropertiesLoose(_ref, ["size", "color", "animationDuration", "className", "style"]);

  return React.createElement(HalfSpinner, _extends({
    size: size,
    color: color,
    animationDuration: animationDuration,
    className: "half-circle-spinner" + (className ? ' ' + className : ''),
    style: style
  }, props), React.createElement("div", {
    className: "circle circle-1"
  }), React.createElement("div", {
    className: "circle circle-2"
  }));
};

HalfCircleSpinner.propTypes = propTypes$7;

function _templateObject$8() {
  var data = _taggedTemplateLiteralLoose(["\n  height: ", "px;\n  width: ", "px;\n\n  * {\n    box-sizing: border-box;\n  }\n\n  .dot {\n    width: ", "px;\n    height: ", "px;\n    margin: 0 calc(", "px / 2);\n    border: calc(", "px / 5) solid ", ";\n    border-radius: 50%;\n    float: left;\n    transform: scale(0);\n    animation: hollow-dots-spinner-animation\n      ", "ms ease infinite 0ms;\n  }\n  .dot:nth-child(1) {\n    animation-delay: calc(", "ms * 1);\n  }\n  .dot:nth-child(2) {\n    animation-delay: calc(", "ms * 2);\n  }\n  .dot:nth-child(3) {\n    animation-delay: calc(", "ms * 3);\n  }\n  @keyframes hollow-dots-spinner-animation {\n    50% {\n      transform: scale(1);\n      opacity: 1;\n    }\n    100% {\n      opacity: 0;\n    }\n  }\n"]);

  _templateObject$8 = function _templateObject() {
    return data;
  };

  return data;
}
var HollowSpinner = styled.div(_templateObject$8(), function (props) {
  return props.size;
}, function (props) {
  return 2 * props.size * props.dotsNum;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.color;
}, function (props) {
  return props.animationDuration;
}, function (props) {
  return props.animationDelay;
}, function (props) {
  return props.animationDelay;
}, function (props) {
  return props.animationDelay;
});
var propTypes$8 = {
  size: PropTypes.number,
  animationDuration: PropTypes.number,
  color: PropTypes.string,
  className: PropTypes.string,
  style: PropTypes.object
};

function generateDots(num) {
  return Array.from({
    length: num
  }).map(function (val, index) {
    return React.createElement("div", {
      key: index,
      className: "dot"
    });
  });
}

var HollowDotsSpinner = function HollowDotsSpinner(_ref) {
  var _ref$size = _ref.size,
      size = _ref$size === void 0 ? 15 : _ref$size,
      _ref$color = _ref.color,
      color = _ref$color === void 0 ? '#fff' : _ref$color,
      _ref$animationDuratio = _ref.animationDuration,
      animationDuration = _ref$animationDuratio === void 0 ? 1000 : _ref$animationDuratio,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      style = _ref.style,
      props = _objectWithoutPropertiesLoose(_ref, ["size", "color", "animationDuration", "className", "style"]);

  var dotsNum = 3;
  var animationDelay = animationDuration * 0.3;
  return React.createElement(HollowSpinner, _extends({
    size: size,
    color: color,
    animationDuration: animationDuration,
    className: "hollow-dots-spinner" + (className ? ' ' + className : ''),
    style: style,
    dotsNum: dotsNum,
    animationDelay: animationDelay
  }, props), generateDots(dotsNum));
};

HollowDotsSpinner.propTypes = propTypes$8;

function _templateObject$9() {
  var data = _taggedTemplateLiteralLoose(["\n  height: ", "px;\n  width: ", "px;\n  position: relative;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n\n  * {\n    box-sizing: border-box;\n  }\n\n  .spinnerBlock {\n    animation: intersecting-circles-spinners-animation\n      ", "ms linear infinite;\n    transform-origin: center;\n    display: block;\n    height: ", "px;\n    width: ", "px;\n  }\n  .circle {\n    display: block;\n    border: 2px solid ", ";\n    border-radius: 50%;\n    height: 100%;\n    width: 100%;\n    position: absolute;\n    left: 0;\n    top: 0;\n  }\n  .circle:nth-child(1) {\n    left: 0;\n    top: 0;\n  }\n  .circle:nth-child(2) {\n    left: ", "px;\n    top: ", "px;\n  }\n  .circle:nth-child(3) {\n    left: ", "px;\n    top: ", "px;\n  }\n  .circle:nth-child(4) {\n    left: 0;\n    top: ", "px;\n  }\n  .circle:nth-child(5) {\n    left: ", "px;\n    top: ", "px;\n  }\n  .circle:nth-child(6) {\n    left: ", "px;\n    top: ", "px;\n  }\n  .circle:nth-child(7) {\n    left: 0;\n    top: ", "px;\n  }\n  @keyframes intersecting-circles-spinners-animation {\n    from {\n      transform: rotate(0deg);\n    }\n    to {\n      transform: rotate(360deg);\n    }\n  }\n"]);

  _templateObject$9 = function _templateObject() {
    return data;
  };

  return data;
}
var IntersectingCircles = styled.div(_templateObject$9(), function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.animationDuration;
}, function (props) {
  return props.circleSize;
}, function (props) {
  return props.circleSize;
}, function (props) {
  return props.color;
}, function (props) {
  return props.circleSize * -0.36;
}, function (props) {
  return props.circleSize * 0.2;
}, function (props) {
  return props.circleSize * -0.36;
}, function (props) {
  return props.circleSize * -0.2;
}, function (props) {
  return props.circleSize * -0.36;
}, function (props) {
  return props.circleSize * 0.36;
}, function (props) {
  return props.circleSize * -0.2;
}, function (props) {
  return props.circleSize * 0.36;
}, function (props) {
  return props.circleSize * 0.2;
}, function (props) {
  return props.circleSize * 0.36;
});
var propTypes$9 = {
  size: PropTypes.number,
  animationDuration: PropTypes.number,
  color: PropTypes.string,
  className: PropTypes.string,
  style: PropTypes.object
};

function generateCircles(num) {
  return Array.from({
    length: num
  }).map(function (val, index) {
    return React.createElement("span", {
      key: index,
      className: "circle"
    });
  });
}

var IntersectingCirclesSpinner = function IntersectingCirclesSpinner(_ref) {
  var _ref$size = _ref.size,
      size = _ref$size === void 0 ? 70 : _ref$size,
      _ref$color = _ref.color,
      color = _ref$color === void 0 ? '#fff' : _ref$color,
      _ref$animationDuratio = _ref.animationDuration,
      animationDuration = _ref$animationDuratio === void 0 ? 1200 : _ref$animationDuratio,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      style = _ref.style,
      props = _objectWithoutPropertiesLoose(_ref, ["size", "color", "animationDuration", "className", "style"]);

  var circleSize = size / 2;
  return React.createElement(IntersectingCircles, _extends({
    size: size,
    color: color,
    animationDuration: animationDuration,
    className: "intersecting-circles-spinner" + (className ? ' ' + className : ''),
    style: style,
    circleSize: circleSize
  }, props), React.createElement("div", {
    className: "spinnerBlock"
  }, generateCircles(7)));
};

IntersectingCirclesSpinner.propTypes = propTypes$9;

function _templateObject$a() {
  var data = _taggedTemplateLiteralLoose(["\n  width: ", "px;\n  height: ", "px;\n  position: relative;\n\n  * {\n    box-sizing: border-box;\n  }\n\n  .rhombus {\n    height: ", "px;\n    width: ", "px;\n    background-color: ", ";\n    left: ", "px;\n    position: absolute;\n    margin: 0 auto;\n    border-radius: 2px;\n    transform: translateY(0) rotate(45deg) scale(0);\n    animation: looping-rhombuses-spinner-animation\n      ", "ms linear infinite;\n  }\n  .rhombus:nth-child(1) {\n    animation-delay: calc(", "ms * 1 / -1.5);\n  }\n  .rhombus:nth-child(2) {\n    animation-delay: calc(", "ms * 2 / -1.5);\n  }\n  .rhombus:nth-child(3) {\n    animation-delay: calc(", "ms * 3 / -1.5);\n  }\n  @keyframes looping-rhombuses-spinner-animation {\n    0% {\n      transform: translateX(0) rotate(45deg) scale(0);\n    }\n    50% {\n      transform: translateX(-233%) rotate(45deg) scale(1);\n    }\n    100% {\n      transform: translateX(-466%) rotate(45deg) scale(0);\n    }\n  }\n"]);

  _templateObject$a = function _templateObject() {
    return data;
  };

  return data;
}
var LoadingRhombus = styled.div(_templateObject$a(), function (props) {
  return props.size * 4;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.color;
}, function (props) {
  return props.size * 4;
}, function (props) {
  return props.animationDuration;
}, function (props) {
  return props.animationDuration;
}, function (props) {
  return props.animationDuration;
}, function (props) {
  return props.animationDuration;
});
var propTypes$a = {
  size: PropTypes.number,
  animationDuration: PropTypes.number,
  color: PropTypes.string,
  className: PropTypes.string,
  style: PropTypes.object
};

function generateSpinners(num) {
  return Array.from({
    length: num
  }).map(function (val, index) {
    return React.createElement("div", {
      key: index,
      className: "rhombus"
    });
  });
}

var LoopingRhombusesSpinner = function LoopingRhombusesSpinner(_ref) {
  var _ref$size = _ref.size,
      size = _ref$size === void 0 ? 15 : _ref$size,
      _ref$color = _ref.color,
      color = _ref$color === void 0 ? '#fff' : _ref$color,
      _ref$animationDuratio = _ref.animationDuration,
      animationDuration = _ref$animationDuratio === void 0 ? 2500 : _ref$animationDuratio,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      style = _ref.style,
      props = _objectWithoutPropertiesLoose(_ref, ["size", "color", "animationDuration", "className", "style"]);

  var num = 3;
  return React.createElement(LoadingRhombus, _extends({
    size: size,
    color: color,
    animationDuration: animationDuration,
    className: "looping-rhombuses-spinner" + (className ? ' ' + className : ''),
    style: style
  }, props), generateSpinners(num));
};

LoopingRhombusesSpinner.propTypes = propTypes$a;

function _templateObject$b() {
  var data = _taggedTemplateLiteralLoose(["\n  height: ", "px;\n  width: ", "px;\n  border-radius: 50%;\n  perspective: 800px;\n\n  * {\n    box-sizing: border-box;\n  }\n\n  .orbit {\n    position: absolute;\n    box-sizing: border-box;\n    width: 100%;\n    height: 100%;\n    border-radius: 50%;\n  }\n  .orbit:nth-child(1) {\n    left: 0%;\n    top: 0%;\n    animation: orbit-spinner-orbit-one-animation\n      ", "ms linear infinite;\n    border-bottom: 3px solid ", ";\n  }\n  .orbit:nth-child(2) {\n    right: 0%;\n    top: 0%;\n    animation: orbit-spinner-orbit-two-animation\n      ", "ms linear infinite;\n    border-right: 3px solid ", ";\n  }\n  .orbit:nth-child(3) {\n    right: 0%;\n    bottom: 0%;\n    animation: orbit-spinner-orbit-three-animation\n      ", "ms linear infinite;\n    border-top: 3px solid ", ";\n  }\n  @keyframes orbit-spinner-orbit-one-animation {\n    0% {\n      transform: rotateX(35deg) rotateY(-45deg) rotateZ(0deg);\n    }\n    100% {\n      transform: rotateX(35deg) rotateY(-45deg) rotateZ(360deg);\n    }\n  }\n  @keyframes orbit-spinner-orbit-two-animation {\n    0% {\n      transform: rotateX(50deg) rotateY(10deg) rotateZ(0deg);\n    }\n    100% {\n      transform: rotateX(50deg) rotateY(10deg) rotateZ(360deg);\n    }\n  }\n  @keyframes orbit-spinner-orbit-three-animation {\n    0% {\n      transform: rotateX(35deg) rotateY(55deg) rotateZ(0deg);\n    }\n    100% {\n      transform: rotateX(35deg) rotateY(55deg) rotateZ(360deg);\n    }\n  }\n"]);

  _templateObject$b = function _templateObject() {
    return data;
  };

  return data;
}
var Orbit = styled.div(_templateObject$b(), function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.animationDuration;
}, function (props) {
  return props.color;
}, function (props) {
  return props.animationDuration;
}, function (props) {
  return props.color;
}, function (props) {
  return props.animationDuration;
}, function (props) {
  return props.color;
});
var propTypes$b = {
  size: PropTypes.number,
  animationDuration: PropTypes.number,
  color: PropTypes.string,
  className: PropTypes.string,
  style: PropTypes.object
};

var OrbitSpinner = function OrbitSpinner(_ref) {
  var _ref$size = _ref.size,
      size = _ref$size === void 0 ? 50 : _ref$size,
      _ref$color = _ref.color,
      color = _ref$color === void 0 ? '#fff' : _ref$color,
      _ref$animationDuratio = _ref.animationDuration,
      animationDuration = _ref$animationDuratio === void 0 ? 1000 : _ref$animationDuratio,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      style = _ref.style,
      props = _objectWithoutPropertiesLoose(_ref, ["size", "color", "animationDuration", "className", "style"]);

  return React.createElement(Orbit, _extends({
    size: size,
    color: color,
    animationDuration: animationDuration,
    className: "orbit-spinner" + (className ? ' ' + className : ''),
    style: style
  }, props), React.createElement("div", {
    className: "orbit one"
  }), React.createElement("div", {
    className: "orbit two"
  }), React.createElement("div", {
    className: "orbit three"
  }));
};

OrbitSpinner.propTypes = propTypes$b;

function _templateObject$c() {
  var data = _taggedTemplateLiteralLoose(["\n  height: ", "px;\n  width: ", "px;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n\n  * {\n    box-sizing: border-box;\n  }\n\n  .pixel-spinner-inner {\n    width: ", "px;\n    height: ", "px;\n    background-color: ", ";\n    color: ", ";\n\n    box-shadow: ", "px\n        ", "px 0 0,\n      ", "px\n        ", "px 0 0,\n      ", "px\n        ", "px 0 0,\n      ", "px\n        ", "px 0 0,\n      0 ", "px 0 0,\n      ", "px 0 0 0,\n      ", "px 0 0 0,\n      0 ", "px 0 0;\n    animation: pixel-spinner-animation ", "ms\n      linear infinite;\n  }\n\n  @keyframes pixel-spinner-animation {\n    50% {\n      box-shadow: ", "px\n          ", "px 0 0,\n        ", "px\n          ", "px 0 0,\n        ", "px ", "px\n          0 0,\n        ", "px ", "px\n          0 0,\n        0 ", "px 0 0,\n        ", "px 0 0 0,\n        ", "px 0 0 0,\n        0 ", "px 0 0;\n    }\n    75% {\n      box-shadow: ", "px\n          ", "px 0 0,\n        ", "px\n          ", "px 0 0,\n        ", "px ", "px\n          0 0,\n        ", "px ", "px\n          0 0,\n        0 ", "px 0 0,\n        ", "px 0 0 0,\n        ", "px 0 0 0,\n        0 ", "px 0 0;\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n"]);

  _templateObject$c = function _templateObject() {
    return data;
  };

  return data;
}
var Pixels = styled.div(_templateObject$c(), function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.pixelSize;
}, function (props) {
  return props.pixelSize;
}, function (props) {
  return props.color;
}, function (props) {
  return props.color;
}, function (props) {
  return props.pixelSize * 1.5;
}, function (props) {
  return props.pixelSize * 1.5;
}, function (props) {
  return props.pixelSize * -1.5;
}, function (props) {
  return props.pixelSize * -1.5;
}, function (props) {
  return props.pixelSize * 1.5;
}, function (props) {
  return props.pixelSize * -1.5;
}, function (props) {
  return props.pixelSize * -1.5;
}, function (props) {
  return props.pixelSize * 1.5;
}, function (props) {
  return props.pixelSize * 1.5;
}, function (props) {
  return props.pixelSize * 1.5;
}, function (props) {
  return props.pixelSize * -1.5;
}, function (props) {
  return props.pixelSize * -1.5;
}, function (props) {
  return props.animationDuration;
}, function (props) {
  return props.pixelSize * 2;
}, function (props) {
  return props.pixelSize * 2;
}, function (props) {
  return props.pixelSize * -2;
}, function (props) {
  return props.pixelSize * -2;
}, function (props) {
  return props.pixelSize * 2;
}, function (props) {
  return props.pixelSize * -2;
}, function (props) {
  return props.pixelSize * -2;
}, function (props) {
  return props.pixelSize * 2;
}, function (props) {
  return props.pixelSize;
}, function (props) {
  return props.pixelSize;
}, function (props) {
  return props.pixelSize * -1;
}, function (props) {
  return props.pixelSize * -1;
}, function (props) {
  return props.pixelSize * 2;
}, function (props) {
  return props.pixelSize * 2;
}, function (props) {
  return props.pixelSize * -2;
}, function (props) {
  return props.pixelSize * -2;
}, function (props) {
  return props.pixelSize * 2;
}, function (props) {
  return props.pixelSize * -2;
}, function (props) {
  return props.pixelSize * -2;
}, function (props) {
  return props.pixelSize * 2;
}, function (props) {
  return props.pixelSize;
}, function (props) {
  return props.pixelSize;
}, function (props) {
  return props.pixelSize * -1;
}, function (props) {
  return props.pixelSize * -1;
});
var propTypes$c = {
  size: PropTypes.number,
  animationDuration: PropTypes.number,
  color: PropTypes.string,
  className: PropTypes.string,
  style: PropTypes.object
};

var PixelSpinner = function PixelSpinner(_ref) {
  var _ref$size = _ref.size,
      size = _ref$size === void 0 ? 70 : _ref$size,
      _ref$color = _ref.color,
      color = _ref$color === void 0 ? '#fff' : _ref$color,
      _ref$animationDuratio = _ref.animationDuration,
      animationDuration = _ref$animationDuratio === void 0 ? 1500 : _ref$animationDuratio,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      style = _ref.style,
      props = _objectWithoutPropertiesLoose(_ref, ["size", "color", "animationDuration", "className", "style"]);

  var pixelSize = size / 7;
  return React.createElement(Pixels, _extends({
    size: size,
    color: color,
    animationDuration: animationDuration,
    className: "pixel-spinner" + (className ? ' ' + className : ''),
    style: style,
    pixelSize: pixelSize
  }, props), React.createElement("div", {
    className: "pixel-spinner-inner"
  }));
};

PixelSpinner.propTypes = propTypes$c;

function _templateObject$d() {
  var data = _taggedTemplateLiteralLoose(["\n  height: ", "px;\n  width: ", "px;\n  position: relative;\n\n  * {\n    box-sizing: border-box;\n  }\n\n  .circle {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    top: 0;\n    left: 0;\n    animation: radar-spinner-animation ", "ms\n      infinite;\n  }\n  .circle:nth-child(1) {\n    padding: ", "px;\n    animation-delay: ", "ms;\n  }\n  .circle:nth-child(2) {\n    padding: ", "px;\n    animation-delay: ", "ms;\n  }\n  .circle:nth-child(3) {\n    padding: ", "px;\n    animation-delay: ", "ms;\n  }\n  .circle:nth-child(4) {\n    padding: ", "px;\n    animation-delay: 0ms;\n  }\n  .circle-inner,\n  .circle-inner-container {\n    height: 100%;\n    width: 100%;\n    border-radius: 50%;\n    border: ", "px solid transparent;\n  }\n  .circle-inner {\n    border-left-color: ", ";\n    border-right-color: ", ";\n  }\n  @keyframes radar-spinner-animation {\n    50% {\n      transform: rotate(180deg);\n    }\n    100% {\n      transform: rotate(0deg);\n    }\n  }\n"]);

  _templateObject$d = function _templateObject() {
    return data;
  };

  return data;
}
var Radar = styled.div(_templateObject$d(), function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.animationDuration;
}, function (props) {
  return props.borderWidth * 2 * 0;
}, function (props) {
  return props.animationDuration * 0.15;
}, function (props) {
  return props.borderWidth * 2 * 1;
}, function (props) {
  return props.animationDuration * 0.15;
}, function (props) {
  return props.borderWidth * 2 * 2;
}, function (props) {
  return props.animationDuration * 0.15;
}, function (props) {
  return props.borderWidth * 2 * 3;
}, function (props) {
  return props.borderWidth;
}, function (props) {
  return props.color;
}, function (props) {
  return props.color;
});
var propTypes$d = {
  size: PropTypes.number,
  animationDuration: PropTypes.number,
  color: PropTypes.string,
  className: PropTypes.string,
  style: PropTypes.object
};

function generateSpinners$1(num) {
  return Array.from({
    length: num
  }).map(function (val, index) {
    return React.createElement("div", {
      key: index,
      className: "circle"
    }, React.createElement("div", {
      className: "circle-inner-container"
    }, React.createElement("div", {
      className: "circle-inner"
    })));
  });
}

var RadarSpinner = function RadarSpinner(_ref) {
  var _ref$size = _ref.size,
      size = _ref$size === void 0 ? 110 : _ref$size,
      _ref$color = _ref.color,
      color = _ref$color === void 0 ? '#fff' : _ref$color,
      _ref$animationDuratio = _ref.animationDuration,
      animationDuration = _ref$animationDuratio === void 0 ? 2000 : _ref$animationDuratio,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      style = _ref.style,
      props = _objectWithoutPropertiesLoose(_ref, ["size", "color", "animationDuration", "className", "style"]);

  var borderWidth = size * 5 / 110;
  return React.createElement(Radar, _extends({
    size: size,
    color: color,
    animationDuration: animationDuration,
    className: "radar-spinner" + (className ? ' ' + className : ''),
    style: style,
    borderWidth: borderWidth
  }, props), generateSpinners$1(4));
};

RadarSpinner.propTypes = propTypes$d;

function _templateObject$e() {
  var data = _taggedTemplateLiteralLoose(["\n  height: ", "px;\n  width: ", "px;\n  position: relative;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  animation: scaling-squares-animation ", "ms;\n  animation-iteration-count: infinite;\n  transform: rotate(0deg);\n\n  * {\n    box-sizing: border-box;\n  }\n\n  .square {\n    height: calc(", "px * 0.25 / 1.3);\n    width: calc(", "px * 0.25 / 1.3);\n    margin-right: auto;\n    margin-left: auto;\n    border: calc(", "px * 0.04 / 1.3) solid\n      ", ";\n    position: absolute;\n    animation-duration: ", "ms;\n    animation-iteration-count: infinite;\n  }\n  .square:nth-child(1) {\n    animation-name: scaling-squares-spinner-animation-child-1;\n  }\n  .square:nth-child(2) {\n    animation-name: scaling-squares-spinner-animation-child-2;\n  }\n  .square:nth-child(3) {\n    animation-name: scaling-squares-spinner-animation-child-3;\n  }\n  .square:nth-child(4) {\n    animation-name: scaling-squares-spinner-animation-child-4;\n  }\n  @keyframes scaling-squares-animation {\n    50% {\n      transform: rotate(90deg);\n    }\n    100% {\n      transform: rotate(180deg);\n    }\n  }\n  @keyframes scaling-squares-spinner-animation-child-1 {\n    50% {\n      transform: translate(150%, 150%) scale(2, 2);\n    }\n  }\n  @keyframes scaling-squares-spinner-animation-child-2 {\n    50% {\n      transform: translate(-150%, 150%) scale(2, 2);\n    }\n  }\n  @keyframes scaling-squares-spinner-animation-child-3 {\n    50% {\n      transform: translate(-150%, -150%) scale(2, 2);\n    }\n  }\n  @keyframes scaling-squares-spinner-animation-child-4 {\n    50% {\n      transform: translate(150%, -150%) scale(2, 2);\n    }\n  }\n"]);

  _templateObject$e = function _templateObject() {
    return data;
  };

  return data;
}
var ScalingSquares = styled.div(_templateObject$e(), function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.animationDuration;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.color;
}, function (props) {
  return props.animationDuration;
});
var propTypes$e = {
  size: PropTypes.number,
  animationDuration: PropTypes.number,
  color: PropTypes.string,
  className: PropTypes.string,
  style: PropTypes.object
};

function generateSpinners$2(num) {
  return Array.from({
    length: num
  }).map(function (val, index) {
    return React.createElement("div", {
      key: index,
      className: "square"
    });
  });
}

var ScalingSquaresSpinner = function ScalingSquaresSpinner(_ref) {
  var _ref$size = _ref.size,
      size = _ref$size === void 0 ? 65 : _ref$size,
      _ref$color = _ref.color,
      color = _ref$color === void 0 ? '#fff' : _ref$color,
      _ref$animationDuratio = _ref.animationDuration,
      animationDuration = _ref$animationDuratio === void 0 ? 1250 : _ref$animationDuratio,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      style = _ref.style,
      props = _objectWithoutPropertiesLoose(_ref, ["size", "color", "animationDuration", "className", "style"]);

  return React.createElement(ScalingSquares, _extends({
    size: size,
    color: color,
    animationDuration: animationDuration,
    className: "scaling-squares-spinner" + (className ? ' ' + className : ''),
    style: style
  }, props), generateSpinners$2(4));
};

ScalingSquaresSpinner.propTypes = propTypes$e;

function _templateObject$f() {
  var data = _taggedTemplateLiteralLoose(["\n  height: ", "px;\n  width: ", "px;\n  top: ", "px;\n\n  * {\n    box-sizing: border-box;\n  }\n\n  .square {\n    height: ", "px;\n    width: ", "px;\n    top: ", "px;\n    margin-right: calc(", "px / 3);\n    margin-top: calc(", "px / 3);\n    background: ", ";\n    float: left;\n    position: relative;\n    opacity: 0;\n    animation: self-building-square-spinner\n      ", "ms infinite;\n  }\n  .square:nth-child(1) {\n    animation-delay: calc(", "ms * 6);\n  }\n  .square:nth-child(2) {\n    animation-delay: calc(", "ms * 7);\n  }\n  .square:nth-child(3) {\n    animation-delay: calc(", "ms * 8);\n  }\n  .square:nth-child(4) {\n    animation-delay: calc(", "ms * 3);\n  }\n  .square:nth-child(5) {\n    animation-delay: calc(", "ms * 4);\n  }\n  .square:nth-child(6) {\n    animation-delay: calc(", "ms * 5);\n  }\n  .square:nth-child(7) {\n    animation-delay: calc(", "ms * 0);\n  }\n  .square:nth-child(8) {\n    animation-delay: calc(", "ms * 1);\n  }\n  .square:nth-child(9) {\n    animation-delay: calc(", "ms * 2);\n  }\n  .clear {\n    clear: both;\n  }\n  @keyframes self-building-square-spinner {\n    0% {\n      opacity: 0;\n    }\n    5% {\n      opacity: 1;\n      top: 0;\n    }\n    50.9% {\n      opacity: 1;\n      top: 0;\n    }\n    55.9% {\n      opacity: 0;\n      top: inherit;\n    }\n  }\n"]);

  _templateObject$f = function _templateObject() {
    return data;
  };

  return data;
}
var BuildingSquare = styled.div(_templateObject$f(), function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return -1 * props.initialTopPosition;
}, function (props) {
  return props.size / 4;
}, function (props) {
  return props.size / 4;
}, function (props) {
  return -1 * props.initialTopPosition;
}, function (props) {
  return props.size / 4;
}, function (props) {
  return props.size / 4;
}, function (props) {
  return props.color;
}, function (props) {
  return props.animationDuration;
}, function (props) {
  return props.animationDuration * 0.05;
}, function (props) {
  return props.animationDuration * 0.05;
}, function (props) {
  return props.animationDuration * 0.05;
}, function (props) {
  return props.animationDuration * 0.05;
}, function (props) {
  return props.animationDuration * 0.05;
}, function (props) {
  return props.animationDuration * 0.05;
}, function (props) {
  return props.animationDuration * 0.05;
}, function (props) {
  return props.animationDuration * 0.05;
}, function (props) {
  return props.animationDuration * 0.05;
});
var propTypes$f = {
  size: PropTypes.number,
  animationDuration: PropTypes.number,
  color: PropTypes.string,
  className: PropTypes.string,
  style: PropTypes.object
};

function generateSpinners$3(num) {
  return Array.from({
    length: num
  }).map(function (val, index) {
    return React.createElement("div", {
      key: index,
      className: "square" + (index % 3 === 0 ? ' clear' : '')
    });
  });
}

var SelfBuildingSquareSpinner = function SelfBuildingSquareSpinner(_ref) {
  var _ref$size = _ref.size,
      size = _ref$size === void 0 ? 40 : _ref$size,
      _ref$color = _ref.color,
      color = _ref$color === void 0 ? '#fff' : _ref$color,
      _ref$animationDuratio = _ref.animationDuration,
      animationDuration = _ref$animationDuratio === void 0 ? 6000 : _ref$animationDuratio,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      style = _ref.style,
      props = _objectWithoutPropertiesLoose(_ref, ["size", "color", "animationDuration", "className", "style"]);

  var initialTopPosition = size / 6;
  return React.createElement(BuildingSquare, _extends({
    size: size,
    color: color,
    animationDuration: animationDuration,
    className: "self-building-square-spinner" + (className ? ' ' + className : ''),
    style: style,
    initialTopPosition: initialTopPosition
  }, props), generateSpinners$3(9));
};

SelfBuildingSquareSpinner.propTypes = propTypes$f;

function _templateObject$g() {
  var data = _taggedTemplateLiteralLoose(["\n  height: ", "px;\n  width: ", "px;\n  position: relative;\n\n  * {\n    box-sizing: border-box;\n  }\n\n  .ring {\n    border-radius: 50%;\n    position: absolute;\n    border: calc(", "px * 0.05) solid transparent;\n    border-top-color: ", ";\n    border-left-color: ", ";\n    animation: semipolar-spinner-animation\n      ", "ms infinite;\n  }\n  .ring:nth-child(1) {\n    height: calc(\n      ", "px - ", "px * 0.2 * 0\n    );\n    width: calc(\n      ", "px - ", "px * 0.2 * 0\n    );\n    top: calc(", "px * 0.1 * 0);\n    left: calc(", "px * 0.1 * 0);\n    animation-delay: calc(", "ms * 0.1 * 4);\n    z-index: 5;\n  }\n  .ring:nth-child(2) {\n    height: calc(\n      ", "px - ", "px * 0.2 * 1\n    );\n    width: calc(\n      ", "px - ", "px * 0.2 * 1\n    );\n    top: calc(", "px * 0.1 * 1);\n    left: calc(", "px * 0.1 * 1);\n    animation-delay: calc(", "ms * 0.1 * 3);\n    z-index: 4;\n  }\n  .ring:nth-child(3) {\n    height: calc(\n      ", "px - ", "px * 0.2 * 2\n    );\n    width: calc(\n      ", "px - ", "px * 0.2 * 2\n    );\n    top: calc(", "px * 0.1 * 2);\n    left: calc(", "px * 0.1 * 2);\n    animation-delay: calc(", "ms * 0.1 * 2);\n    z-index: 3;\n  }\n  .ring:nth-child(4) {\n    height: calc(\n      ", "px - ", "px * 0.2 * 3\n    );\n    width: calc(\n      ", "px - ", "px * 0.2 * 3\n    );\n    top: calc(", "px * 0.1 * 3);\n    left: calc(", "px * 0.1 * 3);\n    animation-delay: calc(", "ms * 0.1 * 1);\n    z-index: 2;\n  }\n  .ring:nth-child(5) {\n    height: calc(\n      ", "px - ", "px * 0.2 * 4\n    );\n    width: calc(\n      ", "px - ", "px * 0.2 * 4\n    );\n    top: calc(", "px * 0.1 * 4);\n    left: calc(", "px * 0.1 * 4);\n    animation-delay: calc(", "ms * 0.1 * 0);\n    z-index: 1;\n  }\n  @keyframes semipolar-spinner-animation {\n    50% {\n      transform: rotate(360deg) scale(0.7);\n    }\n  }\n"]);

  _templateObject$g = function _templateObject() {
    return data;
  };

  return data;
}
var Semipolar = styled.div(_templateObject$g(), function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.color;
}, function (props) {
  return props.color;
}, function (props) {
  return props.animationDuration;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.animationDuration;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.animationDuration;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.animationDuration;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.animationDuration;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.animationDuration;
});
var propTypes$g = {
  size: PropTypes.number,
  animationDuration: PropTypes.number,
  color: PropTypes.string,
  className: PropTypes.string,
  style: PropTypes.object
};

function generateSpinners$4(num) {
  return Array.from({
    length: num
  }).map(function (val, index) {
    return React.createElement("div", {
      key: index,
      className: "ring"
    });
  });
}

var SemipolarSpinner = function SemipolarSpinner(_ref) {
  var _ref$size = _ref.size,
      size = _ref$size === void 0 ? 65 : _ref$size,
      _ref$color = _ref.color,
      color = _ref$color === void 0 ? '#fff' : _ref$color,
      _ref$animationDuratio = _ref.animationDuration,
      animationDuration = _ref$animationDuratio === void 0 ? 2000 : _ref$animationDuratio,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      style = _ref.style,
      props = _objectWithoutPropertiesLoose(_ref, ["size", "color", "animationDuration", "className", "style"]);

  return React.createElement(Semipolar, _extends({
    size: size,
    color: color,
    animationDuration: animationDuration,
    className: "semipolar-spinner" + (className ? ' ' + className : ''),
    style: style
  }, props), generateSpinners$4(5));
};

SemipolarSpinner.propTypes = propTypes$g;

function _templateObject$h() {
  var data = _taggedTemplateLiteralLoose(["\n  height: ", "px;\n  width: ", "px;\n\n  * {\n    box-sizing: border-box;\n  }\n\n  .spring-spinner-part {\n    overflow: hidden;\n    height: calc(", "px / 2);\n    width: ", "px;\n  }\n  .spring-spinner-part.bottom {\n    transform: rotate(180deg) scale(-1, 1);\n  }\n  .spring-spinner-rotator {\n    width: ", "px;\n    height: ", "px;\n    border: calc(", "px / 7) solid transparent;\n    border-right-color: ", ";\n    border-top-color: ", ";\n    border-radius: 50%;\n    box-sizing: border-box;\n    animation: spring-spinner-animation ", "ms\n      ease-in-out infinite;\n    transform: rotate(-200deg);\n  }\n  @keyframes spring-spinner-animation {\n    0% {\n      border-width: calc(", "px / 7);\n    }\n    25% {\n      border-width: calc(", "px / 23.33);\n    }\n    50% {\n      transform: rotate(115deg);\n      border-width: calc(", "px / 7);\n    }\n    75% {\n      border-width: calc(", "px / 23.33);\n    }\n    100% {\n      border-width: calc(", "px / 7);\n    }\n  }\n"]);

  _templateObject$h = function _templateObject() {
    return data;
  };

  return data;
}
var Spring = styled.div(_templateObject$h(), function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.color;
}, function (props) {
  return props.color;
}, function (props) {
  return props.animationDuration;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
});
var propTypes$h = {
  size: PropTypes.number,
  animationDuration: PropTypes.number,
  color: PropTypes.string,
  className: PropTypes.string,
  style: PropTypes.object
};

var SpringSpinner = function SpringSpinner(_ref) {
  var _ref$size = _ref.size,
      size = _ref$size === void 0 ? 70 : _ref$size,
      _ref$color = _ref.color,
      color = _ref$color === void 0 ? '#fff' : _ref$color,
      _ref$animationDuratio = _ref.animationDuration,
      animationDuration = _ref$animationDuratio === void 0 ? 3000 : _ref$animationDuratio,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      style = _ref.style,
      props = _objectWithoutPropertiesLoose(_ref, ["size", "color", "animationDuration", "className", "style"]);

  return React.createElement(Spring, _extends({
    size: size,
    color: color,
    animationDuration: animationDuration,
    className: "spring-spinner" + (className ? ' ' + className : ''),
    style: style
  }, props), React.createElement("div", {
    className: "spring-spinner-part top"
  }, React.createElement("div", {
    className: "spring-spinner-rotator"
  })), React.createElement("div", {
    className: "spring-spinner-part bottom"
  }, React.createElement("div", {
    className: "spring-spinner-rotator"
  })));
};

SpringSpinner.propTypes = propTypes$h;

function _templateObject$i() {
  var data = _taggedTemplateLiteralLoose(["\n  height: ", "px;\n  width: ", "px;\n  position: relative;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n\n  * {\n    box-sizing: border-box;\n  }\n\n  .square {\n    height: calc(", "px * 0.25 / 1.3);\n    width: calc(", "px * 0.25 / 1.3);\n    animation-duration: ", "ms;\n    border: calc(", "px * 0.04 / 1.3) solid\n      ", ";\n    margin-right: auto;\n    margin-left: auto;\n    position: absolute;\n    animation-iteration-count: infinite;\n  }\n  .square:nth-child(1) {\n    animation-name: swapping-squares-animation-child-1;\n    animation-delay: ", "ms;\n  }\n  .square:nth-child(2) {\n    animation-name: swapping-squares-animation-child-2;\n    animation-delay: 0ms;\n  }\n  .square:nth-child(3) {\n    animation-name: swapping-squares-animation-child-3;\n    animation-delay: ", "ms;\n  }\n  .square:nth-child(4) {\n    animation-name: swapping-squares-animation-child-4;\n    animation-delay: 0ms;\n  }\n  @keyframes swapping-squares-animation-child-1 {\n    50% {\n      transform: translate(150%, 150%) scale(2, 2);\n    }\n  }\n  @keyframes swapping-squares-animation-child-2 {\n    50% {\n      transform: translate(-150%, 150%) scale(2, 2);\n    }\n  }\n  @keyframes swapping-squares-animation-child-3 {\n    50% {\n      transform: translate(-150%, -150%) scale(2, 2);\n    }\n  }\n  @keyframes swapping-squares-animation-child-4 {\n    50% {\n      transform: translate(150%, -150%) scale(2, 2);\n    }\n  }\n"]);

  _templateObject$i = function _templateObject() {
    return data;
  };

  return data;
}
var SwappingSquare = styled.div(_templateObject$i(), function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.animationDuration;
}, function (props) {
  return props.size;
}, function (props) {
  return props.color;
}, function (props) {
  return props.animationDuration * 0.5;
}, function (props) {
  return props.animationDuration * 0.5;
});
var propTypes$i = {
  size: PropTypes.number,
  animationDuration: PropTypes.number,
  color: PropTypes.string,
  className: PropTypes.string,
  style: PropTypes.object
};

function generateSpinners$5(num) {
  return Array.from({
    length: num
  }).map(function (val, index) {
    return React.createElement("div", {
      key: index,
      className: "square"
    });
  });
}

var SwappingSquaresSpinner = function SwappingSquaresSpinner(_ref) {
  var _ref$size = _ref.size,
      size = _ref$size === void 0 ? 65 : _ref$size,
      _ref$color = _ref.color,
      color = _ref$color === void 0 ? '#fff' : _ref$color,
      _ref$animationDuratio = _ref.animationDuration,
      animationDuration = _ref$animationDuratio === void 0 ? 1000 : _ref$animationDuratio,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      style = _ref.style,
      props = _objectWithoutPropertiesLoose(_ref, ["size", "color", "animationDuration", "className", "style"]);

  return React.createElement(SwappingSquare, _extends({
    size: size,
    color: color,
    animationDuration: animationDuration,
    className: "swapping-squares-spinner" + (className ? ' ' + className : ''),
    style: style
  }, props), generateSpinners$5(4));
};

SwappingSquaresSpinner.propTypes = propTypes$i;

function _templateObject$j() {
  var data = _taggedTemplateLiteralLoose(["\n  height: ", "px;\n  width: ", "px;\n  padding: 3px;\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: row;\n  overflow: hidden;\n  box-sizing: border-box;\n\n  * {\n    box-sizing: border-box;\n  }\n\n  .circle {\n    position: absolute;\n    display: block;\n    border-radius: 50%;\n    border: 3px solid ", ";\n    opacity: 1;\n  }\n  .circle:nth-child(1) {\n    height: ", "px;\n    width: ", "px;\n    animation: trinity-rings-spinner-circle1-animation\n      ", "ms infinite linear;\n    border-width: 3px;\n  }\n  .circle:nth-child(2) {\n    height: calc(", "px * 0.65);\n    width: calc(", "px * 0.65);\n    animation: trinity-rings-spinner-circle2-animation\n      ", "ms infinite linear;\n    border-width: 2px;\n  }\n  .circle:nth-child(3) {\n    height: calc(", "px * 0.1);\n    width: calc(", "px * 0.1);\n    animation: trinity-rings-spinner-circle3-animation\n      ", "ms infinite linear;\n    border-width: 1px;\n  }\n  @keyframes trinity-rings-spinner-circle1-animation {\n    0% {\n      transform: rotateZ(20deg) rotateY(0deg);\n    }\n    100% {\n      transform: rotateZ(100deg) rotateY(360deg);\n    }\n  }\n  @keyframes trinity-rings-spinner-circle2-animation {\n    0% {\n      transform: rotateZ(100deg) rotateX(0deg);\n    }\n    100% {\n      transform: rotateZ(0deg) rotateX(360deg);\n    }\n  }\n  @keyframes trinity-rings-spinner-circle3-animation {\n    0% {\n      transform: rotateZ(100deg) rotateX(-360deg);\n    }\n    100% {\n      transform: rotateZ(-360deg) rotateX(360deg);\n    }\n  }\n"]);

  _templateObject$j = function _templateObject() {
    return data;
  };

  return data;
}
var Trinity = styled.div(_templateObject$j(), function (props) {
  return props.size;
}, function (props) {
  return props.size;
}, function (props) {
  return props.color;
}, function (props) {
  return props.outerWidth;
}, function (props) {
  return props.outerWidth;
}, function (props) {
  return props.animationDuration;
}, function (props) {
  return props.outerWidth;
}, function (props) {
  return props.outerWidth;
}, function (props) {
  return props.animationDuration;
}, function (props) {
  return props.outerWidth;
}, function (props) {
  return props.outerWidth;
}, function (props) {
  return props.animationDuration;
});
var propTypes$j = {
  size: PropTypes.number,
  animationDuration: PropTypes.number,
  color: PropTypes.string,
  className: PropTypes.string,
  style: PropTypes.object
};

var TrinityRingsSpinner = function TrinityRingsSpinner(_ref) {
  var _ref$size = _ref.size,
      size = _ref$size === void 0 ? 66 : _ref$size,
      _ref$color = _ref.color,
      color = _ref$color === void 0 ? '#fff' : _ref$color,
      _ref$animationDuratio = _ref.animationDuration,
      animationDuration = _ref$animationDuratio === void 0 ? 1500 : _ref$animationDuratio,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      style = _ref.style,
      props = _objectWithoutPropertiesLoose(_ref, ["size", "color", "animationDuration", "className", "style"]);

  var containerPadding = 3;
  var outerWidth = size - containerPadding * 2;
  return React.createElement(Trinity, _extends({
    size: size,
    color: color,
    animationDuration: animationDuration,
    className: "trinity-rings-spinner" + (className ? ' ' + className : ''),
    style: style,
    outerWidth: outerWidth
  }, props), React.createElement("div", {
    className: "circle circle1"
  }), React.createElement("div", {
    className: "circle circle2"
  }), React.createElement("div", {
    className: "circle circle3"
  }));
};

TrinityRingsSpinner.propTypes = propTypes$j;

exports.AtomSpinner = AtomSpinner;
exports.BreedingRhombusSpinner = BreedingRhombusSpinner;
exports.CirclesToRhombusesSpinner = CirclesToRhombusesSpinner;
exports.FingerprintSpinner = FingerprintSpinner;
exports.FlowerSpinner = FlowerSpinner;
exports.FulfillingBouncingCircleSpinner = FulfillingBouncingCircleSpinner;
exports.FulfillingSquareSpinner = FulfillingSquareSpinner;
exports.HalfCircleSpinner = HalfCircleSpinner;
exports.HollowDotsSpinner = HollowDotsSpinner;
exports.IntersectingCirclesSpinner = IntersectingCirclesSpinner;
exports.LoopingRhombusesSpinner = LoopingRhombusesSpinner;
exports.OrbitSpinner = OrbitSpinner;
exports.PixelSpinner = PixelSpinner;
exports.RadarSpinner = RadarSpinner;
exports.ScalingSquaresSpinner = ScalingSquaresSpinner;
exports.SelfBuildingSquareSpinner = SelfBuildingSquareSpinner;
exports.SemipolarSpinner = SemipolarSpinner;
exports.SpringSpinner = SpringSpinner;
exports.SwappingSquaresSpinner = SwappingSquaresSpinner;
exports.TrinityRingsSpinner = TrinityRingsSpinner;
